#first we need to add and precompile packages

using Pkg
Pkg.add("CSV")
Pkg.add("DataFrames")
Pkg.add("Flux")
Pkg.add("Plots")
using CSV, DataFrames, Flux, Plots

#loading our data files

apples1 = DataFrame(CSV.File("~\\data\\Apple_Golden_1.dat", delim='\t', normalizenames=true))
apples2 = DataFrame(CSV.File("~\\data\\Apple_Golden_2.dat", delim='\t', normalizenames=true))
apples3 = DataFrame(CSV.File("~\\data\\Apple_Golden_3.dat", delim='\t', normalizenames=true))
bananas = DataFrame(CSV.File("~\\data\\bananas.dat", delim='\t', normalizenames=true))
grapes1 = DataFrame(CSV.File("~\\data\\Grape_White.dat", delim='\t', normalizenames=true))
grapes2 = DataFrame(CSV.File("~\\data\\Grape_White_2.dat", delim='\t', normalizenames=true))

#merging files containing data of the same fruit

apples = vcat(apples1, apples2, apples3)
grapes = vcat(grapes1, grapes2) 

#getting data ready for training

x_apples = [ [apples[i, :red], apples[i, :blue]] for i in 1:size(apples, 1) ]
x_bananas = [ [bananas[i, :red], bananas[i, :blue]] for i in 1:size(bananas, 1) ]
x_grapes = [ [grapes[i, :red], grapes[i, :blue]] for i in 1:size(grapes, 1) ]
xs = vcat(x_apples, x_bananas, x_grapes)
ys = vcat(fill(Flux.onehot(1, 1:3), size(x_apples)),
          fill(Flux.onehot(2, 1:3), size(x_bananas)),
          fill(Flux.onehot(3, 1:3), size(x_grapes)))
          
#constructing neural network model and its training

model = Chain(Dense(2, 4, Ïƒ), Dense(4, 3, identity), softmax)
L(x,y) = Flux.crossentropy(model(x), y)
opt = Descent(0.1)
databatch = (Flux.batch(xs), Flux.batch(ys))
Flux.train!(L, params(model),Iterators.repeated(databatch, 50000), opt, cb = Flux.throttle(() -> println("Training..."), 5))

#visualising our trained network

using Plots
function plot_decision_boundaries(model, x_apples, x_bananas, x_grapes)
    plot()
    xlabel!("red value")
    ylabel!("blue value")
    contour!(0:0.01:1, 0:0.01:1, (x,y)->model([x,y])[1], levels=[0.5,0.51], color = cgrad([:red, :red]), colorbar=:none)
    contour!(0:0.01:1, 0:0.01:1, (x,y)->model([x,y])[2], levels=[0.5,0.51], color = cgrad([:blue, :blue]), colorbar=:none)
    contour!(0:0.01:1, 0:0.01:1, (x,y)->model([x,y])[3], levels=[0.5,0.51], color = cgrad([:green, :green]), colorbar=:none)

    scatter!(first.(x_apples), last.(x_apples), m=:cross, label="apples", color = :red)
    scatter!(first.(x_bananas), last.(x_bananas), m=:circle, label="bananas", color = :blue)
    scatter!(first.(x_grapes), last.(x_grapes), m=:square, label="grapes", color = :green)
end
plot_decision_boundaries(model, x_apples, x_bananas, x_grapes)

#saving our visualisation into png file

png(plot_decision_boundaries(model, x_apples, x_bananas, x_grapes), "mlp_graph")
